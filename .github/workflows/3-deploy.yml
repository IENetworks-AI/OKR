name: "Step 3: Deploy"

on:
  workflow_run:
    workflows: ["Step 2: Build & Package"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test verification'
        required: false
        default: false
        type: boolean

jobs:
  check-deployment-prerequisites:
    name: Check Deployment Prerequisites
    runs-on: ubuntu-latest
    outputs:
      can-deploy: ${{ steps.check.outputs.can-deploy }}
      environment: ${{ steps.check.outputs.environment }}
    
    steps:
      - name: Check deployment prerequisites
        id: check
        run: |
          # Check if build workflow succeeded or if manually triggered
          if [ "${{ github.event.workflow_run.conclusion }}" = "success" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "can-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Prerequisites met, proceeding with deployment"
            
            # Set environment
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            else
              echo "environment=staging" >> $GITHUB_OUTPUT
            fi
          else
            echo "can-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Build failed, skipping deployment"
          fi
      
      - name: Check user permissions
        if: steps.check.outputs.can-deploy == 'true'
        run: |
          # Check if user has deployment permissions
          if [ "${{ github.actor }}" = "${{ github.repository_owner }}" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "‚úÖ User has deployment permissions"
          else
            echo "‚ùå User does not have deployment permissions"
            exit 1
          fi

  pre-deployment-validation:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    needs: check-deployment-prerequisites
    if: needs.check-deployment-prerequisites.outputs.can-deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate deployment files
        run: |
          echo "Validating deployment files..."
          
          # Check required deployment files
          required_files=(
            "docker-compose.yml"
            "requirements.txt"
            "dashboard_app.py"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required deployment file: $file"
              exit 1
            else
              echo "‚úÖ Deployment file exists: $file"
            fi
          done
          
          echo "‚úÖ Deployment files validation passed"
      
      - name: Validate environment configuration
        run: |
          echo "Validating environment configuration for ${{ needs.check-deployment-prerequisites.outputs.environment }}..."
          
          # Check if environment-specific configs exist
          env_name="${{ needs.check-deployment-prerequisites.outputs.environment }}"
          
          # Create default configs if they don't exist
          mkdir -p configs/$env_name
          
          if [ ! -f "configs/$env_name/config.yml" ]; then
            echo "Creating default config for $env_name..."
            cat > configs/$env_name/config.yml << EOF
          # Configuration for $env_name environment
          database:
            host: localhost
            port: 5433
            name: okr_db
          
          mlflow:
            tracking_uri: http://localhost:5000
            artifact_root: ./mlflow_artifacts
          
          airflow:
            webserver_port: 8081
            scheduler_enabled: true
          
          kafka:
            bootstrap_servers: localhost:9092
            topic_prefix: okr_$env_name
          EOF
          fi
          
          echo "‚úÖ Environment configuration validated"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [check-deployment-prerequisites, pre-deployment-validation]
    if: needs.check-deployment-prerequisites.outputs.environment == 'staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: okr-ml-pipeline-build
          path: ./artifacts/
      
      - name: Deploy to staging environment
        run: |
          echo "üöÄ Deploying to staging environment..."
          
          # Stop existing services
          echo "Stopping existing services..."
          docker-compose down || true
          
          # Clean up old containers and images
          echo "Cleaning up old resources..."
          docker system prune -f || true
          
          # Start services
          echo "Starting services..."
          docker-compose up -d
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Health check
          echo "Performing health checks..."
          
          # Check if services are running
          if docker-compose ps | grep -q "Up"; then
            echo "‚úÖ Services are running"
          else
            echo "‚ùå Some services failed to start"
            docker-compose logs
            exit 1
          fi
          
          echo "‚úÖ Staging deployment completed successfully"
      
      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment tests..."
          
          # Test dashboard accessibility
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if curl -s http://localhost:8080/api/status > /dev/null; then
              echo "‚úÖ Dashboard is accessible"
              break
            fi
            
            echo "‚è≥ Attempt $attempt/$max_attempts - Dashboard not ready yet..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Dashboard health check failed"
            exit 1
          fi
          
          # Test MLflow accessibility
          if curl -s http://localhost:5000/health > /dev/null; then
            echo "‚úÖ MLflow is accessible"
          else
            echo "‚ö†Ô∏è MLflow is not accessible (this might be expected)"
          fi
          
          echo "‚úÖ Post-deployment tests completed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [check-deployment-prerequisites, pre-deployment-validation]
    if: needs.check-deployment-prerequisites.outputs.environment == 'production'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: okr-ml-pipeline-build
          path: ./artifacts/
      
      - name: Production deployment confirmation
        run: |
          echo "‚ö†Ô∏è PRODUCTION DEPLOYMENT CONFIRMATION"
          echo "This will deploy to the production environment."
          echo "Ensure all staging tests have passed."
          echo "Proceeding with production deployment..."
      
      - name: Deploy to production environment
        run: |
          echo "üöÄ Deploying to production environment..."
          
          # Create backup of current deployment
          echo "Creating backup..."
          timestamp=$(date +%Y%m%d_%H%M%S)
          mkdir -p backups/$timestamp
          
          # Backup current configuration
          if [ -f "docker-compose.yml" ]; then
            cp docker-compose.yml backups/$timestamp/
          fi
          
          # Stop services gracefully
          echo "Stopping services gracefully..."
          docker-compose down --timeout 60
          
          # Deploy new version
          echo "Deploying new version..."
          docker-compose up -d
          
          # Wait for services
          echo "Waiting for services to be ready..."
          sleep 60
          
          echo "‚úÖ Production deployment completed"
      
      - name: Production health checks
        run: |
          echo "Running production health checks..."
          
          # Comprehensive health checks for production
          services=("dashboard:8080" "mlflow:5000" "airflow:8081")
          
          for service in "${services[@]}"; do
            service_name=$(echo $service | cut -d: -f1)
            port=$(echo $service | cut -d: -f2)
            
            echo "Checking $service_name on port $port..."
            
            max_attempts=20
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              if curl -s http://localhost:$port/health > /dev/null 2>&1 || \
                 curl -s http://localhost:$port > /dev/null 2>&1; then
                echo "‚úÖ $service_name is healthy"
                break
              fi
              
              echo "‚è≥ Attempt $attempt/$max_attempts - $service_name not ready..."
              sleep 15
              attempt=$((attempt + 1))
            done
            
            if [ $attempt -gt $max_attempts ]; then
              echo "‚ö†Ô∏è $service_name health check timeout (may still be starting)"
            fi
          done
          
          echo "‚úÖ Production health checks completed"

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Deployment notification
        run: |
          echo "=========================================="
          echo "       DEPLOYMENT NOTIFICATION"
          echo "=========================================="
          
          if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "‚úÖ Staging deployment: SUCCESS"
            echo "üåê Staging URL: http://staging.example.com"
          elif [ "${{ needs.deploy-staging.result }}" = "failure" ]; then
            echo "‚ùå Staging deployment: FAILED"
          fi
          
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "‚úÖ Production deployment: SUCCESS"
            echo "üåê Production URL: http://production.example.com"
          elif [ "${{ needs.deploy-production.result }}" = "failure" ]; then
            echo "‚ùå Production deployment: FAILED"
          fi
          
          echo "=========================================="
          echo "üìä Dashboard: http://localhost:8080"
          echo "üß™ MLflow: http://localhost:5000"
          echo "üå™Ô∏è Airflow: http://localhost:8081"
          echo "=========================================="

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [check-deployment-prerequisites, pre-deployment-validation, deploy-staging, deploy-production, notification]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "=========================================="
          echo "         DEPLOYMENT SUMMARY"
          echo "=========================================="
          echo "Environment: ${{ needs.check-deployment-prerequisites.outputs.environment }}"
          echo "Prerequisites: ${{ needs.check-deployment-prerequisites.result }}"
          echo "Validation: ${{ needs.pre-deployment-validation.result }}"
          echo "Staging Deploy: ${{ needs.deploy-staging.result }}"
          echo "Production Deploy: ${{ needs.deploy-production.result }}"
          echo "Notification: ${{ needs.notification.result }}"
          echo "=========================================="
          
          # Determine overall success
          if ([ "${{ needs.deploy-staging.result }}" = "success" ] || [ "${{ needs.deploy-staging.result }}" = "skipped" ]) && \
             ([ "${{ needs.deploy-production.result }}" = "success" ] || [ "${{ needs.deploy-production.result }}" = "skipped" ]); then
            echo "‚úÖ Deployment completed successfully!"
            exit 0
          else
            echo "‚ùå Deployment had issues. Check the logs above."
            exit 1
          fi
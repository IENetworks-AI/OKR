name: Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run final tests before deployment
      run: |
        pytest --tb=short
    
    - name: Create deployment package
      run: |
        tar -czf okr-project-$(date +%Y%m%d-%H%M%S).tar.gz \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='htmlcov' \
          --exclude='*.log' \
          .
    
    - name: Deploy to Oracle Server
      env:
        ORACLE_HOST: ${{ secrets.ORACLE_HOST }}
        ORACLE_USER: ${{ secrets.ORACLE_USER }}
        ORACLE_SSH_KEY: ${{ secrets.ORACLE_SSH_KEY }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$ORACLE_SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $ORACLE_HOST >> ~/.ssh/known_hosts
        
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Variables
        DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
        BACKUP_PATH="${DEPLOY_PATH}/backups"
        CURRENT_PATH="${DEPLOY_PATH}/current"
        NEW_RELEASE_PATH="${DEPLOY_PATH}/releases/$(date +%Y%m%d-%H%M%S)"
        
        # Create directories
        mkdir -p $BACKUP_PATH $NEW_RELEASE_PATH
        
        # Backup current deployment
        if [ -d "$CURRENT_PATH" ]; then
          tar -czf "$BACKUP_PATH/backup-$(date +%Y%m%d-%H%M%S).tar.gz" -C "$CURRENT_PATH" .
        fi
        
        # Extract new release
        tar -xzf okr-project-*.tar.gz -C $NEW_RELEASE_PATH
        
        # Install/update dependencies
        cd $NEW_RELEASE_PATH
        python3 -m pip install -r requirements.txt --user
        
        # Run database migrations if needed
        # python3 data/scripts/migrate.py
        
        # Update symlink to new release
        rm -f $CURRENT_PATH
        ln -s $NEW_RELEASE_PATH $CURRENT_PATH
        
        # Restart services
        sudo systemctl restart okr-ai-api || echo "AI API service not found"
        sudo systemctl restart okr-data-processor || echo "Data processor service not found"
        sudo systemctl reload nginx || echo "Nginx reload failed"
        
        # Health check
        sleep 10
        curl -f http://localhost:8000/health || echo "Health check failed"
        
        # Cleanup old releases (keep last 5)
        cd "${DEPLOY_PATH}/releases"
        ls -t | tail -n +6 | xargs rm -rf
        
        echo "Deployment completed successfully!"
        EOF
        
        # Copy files and run deployment
        scp okr-project-*.tar.gz deploy.sh $ORACLE_USER@$ORACLE_HOST:~/
        ssh $ORACLE_USER@$ORACLE_HOST 'bash ~/deploy.sh'
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment to Oracle server completed successfully!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi
    
    - name: Update deployment status
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          const description = status === 'success' 
            ? 'Deployment completed successfully'
            : 'Deployment failed';
          
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment?.id,
            state: status,
            description: description,
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
          });

  post-deploy-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Run post-deployment health checks
      env:
        ORACLE_HOST: ${{ secrets.ORACLE_HOST }}
        API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
      run: |
        # Wait for services to be fully up
        sleep 30
        
        # Test AI API endpoint
        curl -f "${API_ENDPOINT}/health" || echo "AI API health check failed"
        
        # Test data processing endpoint  
        curl -f "${API_ENDPOINT}/data/status" || echo "Data API health check failed"
        
        # Test database connectivity
        curl -f "${API_ENDPOINT}/db/health" || echo "Database health check failed"
        
        echo "Post-deployment tests completed!"
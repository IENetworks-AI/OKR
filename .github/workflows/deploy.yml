name: Oracle Server Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  # Pre-deployment validation
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if user has owner permissions
        id: check-permissions
        run: |
          if [ "${{ github.actor }}" = "${{ github.repository_owner }}" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "user_authorized=true" >> $GITHUB_OUTPUT
            echo "User has deployment permissions"
          else
            echo "user_authorized=false" >> $GITHUB_OUTPUT
            echo "User does not have deployment permissions. Only repository owners can deploy."
          fi
      
      - name: Validate Oracle deployment prerequisites
        if: steps.check-permissions.outputs.user_authorized == 'true'
        run: |
          echo "Validating Oracle deployment prerequisites..."
          required_files=(
            "deploy/oracle-setup.sh"
            "deploy/mlapi.service"
            "deploy/nginx/mlapi.conf"
            "docker-compose.yml"
            "requirements.txt"
          )
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            fi
            echo "✓ $file found"
          done
          echo "All prerequisites validated successfully"

  # Oracle Server Deployment
  deploy-oracle:
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Oracle Deployment Configuration
        id: check-deployment
        run: |
          if [ -n "${{ secrets.ORACLE_SSH_KEY }}" ]; then
            echo "oracle_deploy=true" >> $GITHUB_OUTPUT
            echo "Oracle deployment secrets found - proceeding with deployment"
          else
            echo "oracle_deploy=false" >> $GITHUB_OUTPUT
            echo "Oracle deployment secrets not found - skipping deployment"
          fi

      - name: Setup SSH
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/oracle.key
          chmod 600 ~/.ssh/oracle.key
          ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@${{ secrets.ORACLE_HOST }} "echo 'SSH connection successful'"

      - name: Deploy Code to Oracle Server
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          rsync -avz --delete -e "ssh -i ~/.ssh/oracle.key -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='venv' \
            ./ ubuntu@${{ secrets.ORACLE_HOST }}:/home/ubuntu/okr-project/

      - name: Setup Oracle Server Environment
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@${{ secrets.ORACLE_HOST }} << 'EOF'
            echo "Setting up Oracle server environment..."
            cd ~/okr-project
            if [ -f "deploy/oracle-setup.sh" ]; then
              chmod +x deploy/oracle-setup.sh
              ./deploy/oracle-setup.sh
            else
              sudo apt-get update
              sudo apt-get install -y python3 python3-pip python3-venv docker.io docker-compose
              python3 -m venv venv
              source venv/bin/activate
              pip install --upgrade pip
              pip install -r requirements.txt
              sudo cp deploy/mlapi.service /etc/systemd/system/
              sudo systemctl daemon-reload
              sudo systemctl enable mlapi.service
              sudo systemctl start mlapi.service
            fi

            # Start Docker services
            docker compose down || true
            docker compose up -d

            # Wait for Kafka, Airflow DB, API
            echo "Waiting for services to become healthy..."
            sleep 30
            docker compose ps

            # Healthcheck API
            curl -f http://localhost:5001/ || echo "API not responding yet"
          EOF

      - name: Verify Deployment
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@${{ secrets.ORACLE_HOST }} << 'EOF'
            echo "Verifying deployment..."
            docker compose ps
            curl -f http://localhost:5001/ || echo "API test failed"
          EOF

      - name: Deployment Summary
        if: steps.check-deployment.outputs.oracle_deploy == 'false'
        run: |
          echo "Oracle deployment skipped (secrets not configured)."
          echo "Configure ORACLE_SSH_KEY and ORACLE_HOST to enable deployment."

  # Test Branch Pipeline (No Deployment)
  test-pipeline:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run ETL Pipeline Tests
        run: |
          python scripts/validate_etl_pipeline.py
          echo "ETL pipeline tests completed successfully."
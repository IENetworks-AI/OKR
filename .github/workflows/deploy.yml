name: Deploy to Oracle Server

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_HOST} '
            set -euo pipefail
            cd ~/okr-project
            git pull --rebase --autostash || true
            docker compose down || true
            docker compose build --no-cache
            docker compose up -d
            docker compose ps
          '
name: Oracle Server Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  # Pre-deployment validation
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if user has owner permissions
        id: check-permissions
        run: |
          # Check if the user has owner role or is a repository owner
          if [ "${{ github.actor }}" = "${{ github.repository_owner }}" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "user_authorized=true" >> $GITHUB_OUTPUT
            echo "User has deployment permissions"
          else
            echo "user_authorized=false" >> $GITHUB_OUTPUT
            echo "User does not have deployment permissions. Only repository owners can deploy."
          fi
      
      - name: Validate Oracle deployment prerequisites
        if: steps.check-permissions.outputs.user_authorized == 'true'
        run: |
          echo "Validating Oracle deployment prerequisites..."
          
          # Check required files
          required_files=(
            "deploy/oracle-setup.sh"
            "deploy/mlapi.service"
            "deploy/nginx/mlapi.conf"
            "docker-compose.yml"
            "requirements.txt"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            fi
            echo "✓ $file found"
          done
          
          echo "All prerequisites validated successfully"

  # Oracle Server Deployment
  deploy-oracle:
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Oracle Deployment Configuration
        id: check-deployment
        run: |
          if [ -n "${{ secrets.ORACLE_SSH_KEY }}" ]; then
            echo "oracle_deploy=true" >> $GITHUB_OUTPUT
            echo "Oracle deployment secrets found - proceeding with deployment"
          else
            echo "oracle_deploy=false" >> $GITHUB_OUTPUT
            echo "Oracle deployment secrets not found - skipping deployment"
            echo "Required secrets: ORACLE_SSH_KEY"
          fi

      - name: Setup SSH
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/oracle.key
          chmod 600 ~/.ssh/oracle.key
          ssh-keyscan -H 139.185.33.139 >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          echo "Testing SSH connection to Oracle server..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@139.185.33.139 "echo 'SSH connection successful'; uname -a; whoami; pwd"
          echo "SSH connection test completed successfully"

      - name: Deploy Code to Oracle Server
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          echo "Starting deployment to Oracle Cloud..."
          echo "Target: ${{ secrets.ORACLE_HOST }}"
          echo "Project: okr-project"
          
          # Deploy using rsync
          rsync -avz --delete -e "ssh -i ~/.ssh/oracle.key -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='venv' \
            ./ ubuntu@139.185.33.139:/home/ubuntu/okr-project/
          
          echo "Code deployment completed"

      - name: Setup Oracle Server Environment
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@139.185.33.139 << 'EOF'
          echo "Setting up Oracle server environment..."
          
          # Navigate to project directory
          cd ~/okr-project
          
          # Run Oracle-specific setup script
          if [ -f "deploy/oracle-setup.sh" ]; then
            echo "Running Oracle setup script..."
            chmod +x deploy/oracle-setup.sh
            ./deploy/oracle-setup.sh
          else
            echo "Oracle setup script not found, running basic setup..."
            
            # Basic setup
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip python3-venv docker.io docker-compose
            
            # Create virtual environment
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Setup systemd service
            sudo cp deploy/mlapi.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable mlapi.service
            sudo systemctl start mlapi.service
          fi
          
          # Start Docker services
          echo "Starting Docker services..."
          docker compose down || true
          docker compose up -d
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Test services
          echo "Testing deployed services..."
          
          # Test API
          curl -f http://localhost:5001/ || echo "API not responding yet"
          
          # Test Docker containers
          docker compose ps
          
          echo "Oracle server deployment completed successfully!"
          EOF

      - name: Verify Deployment
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          echo "Verifying deployment..."
          
          # Test API endpoint
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@139.185.33.139 << 'EOF'
          echo "Testing API endpoint..."
          curl -f http://localhost:5001/ || echo "API test failed"
          
          echo "Testing Docker services..."
          docker compose ps
          
          echo "Deployment verification completed"
          EOF

      - name: Deployment Summary
        if: steps.check-deployment.outputs.oracle_deploy == 'false'
        run: |
          echo "Deployment completed successfully!"
          echo "Oracle deployment was skipped (secrets not configured)"
          echo "To enable Oracle deployment, configure the following secrets:"
          echo "   - ORACLE_SSH_KEY: Private SSH key for Oracle instance"
          echo "   - ORACLE_HOST: Oracle instance IP address"
          echo "Local development can continue without these secrets"

  # Test Branch Pipeline (No Deployment)
  test-pipeline:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test' || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run ETL Pipeline Tests
        run: |
          echo "Running ETL pipeline tests on test branch..."
          python scripts/validate_etl_pipeline.py
      
      - name: Test Branch Summary
        run: |
          echo "Test branch pipeline completed successfully!"
          echo "No deployment performed - this is a test branch"
          echo "Deployment only occurs on main branch with owner permissions"

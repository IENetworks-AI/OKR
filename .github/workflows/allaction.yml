name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, test]
  pull_request:
    branches: [main, develop, test]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  # Code Quality and Testing
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black pylint pytest pytest-cov bandit
      
      - name: Check code formatting
        run: |
          black --check --diff . || echo "Code formatting issues found"
      
      - name: Run linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: bandit-report.json

  # Unit Tests
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run unit tests with coverage
        run: |
          pytest --cov=./ --cov-report=xml --cov-report=html -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov

  # Docker Build and Validation
  docker-validation:
    name: Docker Validation
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker images
        run: |
          docker build -t okr-api:test -f api/Dockerfile .
          docker build -t okr-producer:test -f kafka_pipeline/producers/Dockerfile .
          docker build -t okr-consumer:test -f kafka_pipeline/consumers/Dockerfile .
      
      - name: Test Docker Compose
        run: |
          docker compose -f docker-compose.yml config

  # ETL Pipeline Validation
  etl-validation:
    name: ETL Pipeline Validation
    runs-on: ubuntu-latest
    needs: docker-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install apache-airflow kafka-python confluent-kafka
      
      - name: Validate Airflow DAGs
        run: |
          echo "Validating Airflow DAGs..."
          python -c "
          import os
          import sys
          sys.path.append('airflow_dags')
          from airflow.models import DagBag
          dagbag = DagBag('airflow_dags/dags')
          if dagbag.import_errors:
              print('DAG import errors:')
              for filename, errors in dagbag.import_errors.items():
                  print(f'{filename}: {errors}')
              sys.exit(1)
          print('All DAGs imported successfully')
          "
      
      - name: Validate ETL Pipeline Components
        run: |
          echo "Validating ETL pipeline components..."
          python scripts/validate_etl_pipeline.py
      
      - name: Validate Configuration Files
        run: |
          echo "Validating configuration files..."
          python -c "
          import yaml
          import os
          
          config_files = [
              'configs/db_config.yaml',
              'configs/kafka_config.yaml',
              'configs/model_config.yaml'
          ]
          
          for config_file in config_files:
              if os.path.exists(config_file):
                  try:
                      with open(config_file, 'r') as f:
                          yaml.safe_load(f)
                      print(f'✓ {config_file} is valid YAML')
                  except Exception as e:
                      print(f'❌ {config_file} has invalid YAML: {e}')
                      exit(1)
              else:
                  print(f'⚠ {config_file} not found')
          "

  # Deployment Validation
  deployment-validation:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: etl-validation
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate Oracle Deployment Configuration
        run: |
          echo "Validating Oracle deployment configuration..."
          
          # Check if Oracle-specific files exist
          required_files=(
              "deploy/oracle-setup.sh"
              "deploy/mlapi.service"
              "deploy/nginx/mlapi.conf"
          )
          
          for file_path in "${required_files[@]}"; do
              if [ ! -f "$file_path" ]; then
                  echo "Missing required deployment file: $file_path"
                  exit 1
              fi
              echo "✓ $file_path found"
          done
          
          # Validate service configuration
          if [ -f "deploy/mlapi.service" ]; then
              echo "✓ systemd service configuration found"
          fi
          
          echo "Oracle deployment configuration validated"

  # Oracle Server Deployment
  deploy-oracle:
    name: Deploy to Oracle Server
    runs-on: ubuntu-latest
    needs: deployment-validation
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Oracle Deployment Configuration
        id: check-deployment
        run: |
          if [ -n "${{ secrets.ORACLE_SSH_KEY }}" ] && [ -n "${{ secrets.ORACLE_HOST }}" ]; then
            echo "oracle_deploy=true" >> $GITHUB_OUTPUT
            echo "Oracle deployment secrets found - proceeding with deployment"
          else
            echo "oracle_deploy=false" >> $GITHUB_OUTPUT
            echo "Oracle deployment secrets not found - skipping deployment"
            echo "Required secrets: ORACLE_SSH_KEY, ORACLE_HOST"
          fi

      - name: Setup SSH
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/oracle.key
          chmod 600 ~/.ssh/oracle.key
          ssh-keyscan -H ${{ secrets.ORACLE_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          echo "Testing SSH connection to Oracle server..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@${{ secrets.ORACLE_HOST }} "echo 'SSH connection successful'; uname -a; whoami; pwd"
          echo "SSH connection test completed successfully"

      - name: Deploy Code to Oracle Server
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          echo "Starting deployment to Oracle Cloud..."
          echo "Target: ${{ secrets.ORACLE_HOST }}"
          echo "Project: okr-project"
          
          # Deploy using rsync with careful exclusions
          rsync -avz --delete -e "ssh -i ~/.ssh/oracle.key -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='venv' \
            --exclude='.github' \
            --exclude='logs' \
            --exclude='.env' \
            ./ ubuntu@${{ secrets.ORACLE_HOST }}:/home/ubuntu/okr-project/
          
          echo "Code deployment completed"

      - name: Setup Oracle Server Environment
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@${{ secrets.ORACLE_HOST }} << 'EOF'
          echo "Setting up Oracle server environment..."
          
          # Navigate to project directory
          cd ~/okr-project
          
          # Run Oracle-specific setup script
          if [ -f "deploy/oracle-setup.sh" ]; then
            echo "Running Oracle setup script..."
            chmod +x deploy/oracle-setup.sh
            ./deploy/oracle-setup.sh
          else
            echo "Oracle setup script not found, running basic setup..."
            
            # Basic setup
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip python3-venv docker.io docker-compose nginx
            
            # Setup systemd service
            if [ -f "deploy/mlapi.service" ]; then
              sudo cp deploy/mlapi.service /etc/systemd/system/
              sudo systemctl daemon-reload
              sudo systemctl enable mlapi.service
            fi
            
            # Setup nginx configuration
            if [ -f "deploy/nginx/mlapi.conf" ]; then
              sudo cp deploy/nginx/mlapi.conf /etc/nginx/sites-available/
              sudo ln -sf /etc/nginx/sites-available/mlapi.conf /etc/nginx/sites-enabled/
              sudo nginx -t && sudo systemctl reload nginx
            fi
          fi
          
          # Start Docker services using the latest code
          echo "Starting Docker services with latest code..."
          docker compose down || true
          docker compose up -d --build
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 30
          
          echo "Oracle server deployment completed successfully!"
          EOF

      - name: Verify Deployment
        if: steps.check-deployment.outputs.oracle_deploy == 'true'
        run: |
          echo "Verifying deployment..."
          
          # Test services
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/oracle.key ubuntu@${{ secrets.ORACLE_HOST }} << 'EOF'
          echo "Testing deployed services..."
          
          # Test API endpoint
          echo "Testing API endpoint..."
          curl -f http://localhost:5001/ || echo "API test failed"
          
          # Test Docker containers
          echo "Checking Docker containers status..."
          docker compose ps
          
          # Test Nginx configuration
          echo "Testing Nginx configuration..."
          sudo nginx -t
          
          echo "Deployment verification completed"
          EOF

      - name: Deployment Summary
        if: steps.check-deployment.outputs.oracle_deploy == 'false'
        run: |
          echo "CI/CD pipeline completed successfully!"
          echo "Oracle deployment was skipped (secrets not configured)"
          echo "To enable Oracle deployment, configure the following secrets:"
          echo "   - ORACLE_SSH_KEY: Private SSH key for Oracle instance"
          echo "   - ORACLE_HOST: Oracle instance IP address"
          echo "Local development can continue without these secrets"
version: '3.8'

services:
  # PostgreSQL for Airflow metadata
  airflow-db:
    image: postgres:15
    container_name: okr_airflow_db
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - okr_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # PostgreSQL for OKR data pipeline
  postgres:
    image: postgres:15
    container_name: okr_postgres_data
    environment:
      POSTGRES_USER: okr_admin
      POSTGRES_PASSWORD: okr_password
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - okr_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U okr_admin -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 180s

  # Redis for Airflow
  redis:
    image: redis:7-alpine
    container_name: okr_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - okr_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s

  # Kafka for streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: okr_kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    restart: unless-stopped
    networks:
      - okr_net
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: okr_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - okr_net
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s

  # Airflow Initialization
  airflow-init:
    image: apache/airflow:2.7.0-python3.11
    container_name: okr_airflow_init
    environment:
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: 'your-fernet-key-here-change-in-production'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
      - ./modern_project/configs:/opt/airflow/configs
    depends_on:
      airflow-db:
        condition: service_healthy
    networks:
      - okr_net
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin
      "

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.0-python3.11
    container_name: okr_airflow_webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: 'your-fernet-key-here-change-in-production'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
      - ./modern_project/configs:/opt/airflow/configs
    depends_on:
      airflow-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - okr_net
    command: airflow webserver
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.0-python3.11
    container_name: okr_airflow_scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: 'your-fernet-key-here-change-in-production'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
      - ./modern_project/configs:/opt/airflow/configs
    depends_on:
      airflow-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - okr_net
    command: airflow scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $(hostname)"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Unified Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: okr_unified_dashboard
    ports:
      - "5000:5000"
    volumes:
      - ./modern_project/dashboard:/app
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgresql://okr_admin:okr_password@postgres:5432/postgres
    restart: unless-stopped
    networks:
      - okr_net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Kafka Consumer Service (for real-time processing)
  kafka-consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: okr_kafka_consumer
    volumes:
      - ./modern_project/kafka_pipeline:/app
      - ./data:/app/data
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgresql://okr_admin:okr_password@postgres:5432/postgres
    restart: unless-stopped
    networks:
      - okr_net
    command: python consumers/data_consumer.py

volumes:
  airflow_db_data:
    driver: local
  postgres_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local

networks:
  okr_net:
    driver: bridge
    name: okr_network
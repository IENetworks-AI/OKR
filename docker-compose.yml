version: '3.8'

services:
  # PostgreSQL for Airflow metadata
  airflow-db:
    image: postgres:15
    container_name: okr_airflow_db
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - okr_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # PostgreSQL for OKR data pipeline
  postgres:
    image: postgres:15
    container_name: okr_postgres_data
    environment:
      POSTGRES_USER: okr_admin
      POSTGRES_PASSWORD: okr_password
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - okr_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U okr_admin -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 180s

  # Redis for Airflow
  redis:
    image: redis:7-alpine
    container_name: okr_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - okr_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s

  # Kafka with KRaft (no Zookeeper needed)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: okr_kafka
    environment:
      # KRaft mode configuration
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      
      # Topic and replication settings for single node
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      
      # Auto topic creation and retention
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      
      # Performance tuning
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless=true"
      
      # KRaft log directory
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_METADATA_LOG_SEGMENT_MS: 15000
      KAFKA_METADATA_MAX_RETENTION_MS: 86400000
      
      # Cluster ID (required for KRaft)
      CLUSTER_ID: "okr-kafka-cluster-001"
    ports:
      - "9092:9092"
      - "9094:9094"
    restart: unless-stopped
    networks:
      - okr_net
    volumes:
      - kafka_data:/var/lib/kafka/data
    command: >
      bash -c "
        # Format the log directory if it doesn't exist
        if [ ! -f /var/lib/kafka/data/meta.properties ]; then
          kafka-storage format -t $${CLUSTER_ID} -c /etc/kafka/kafka.properties
        fi
        # Start Kafka
        /etc/confluent/docker/run
      "
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 15
      start_period: 120s

  # Airflow Initialization
  airflow-init:
    image: apache/airflow:2.7.0-python3.11
    container_name: okr_airflow_init
    environment:
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: 'your-fernet-key-here-change-in-production'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
      - ./configs:/opt/airflow/configs
    depends_on:
      airflow-db:
        condition: service_healthy
    networks:
      - okr_net
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin
      "

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.0-python3.11
    container_name: okr_airflow_webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: 'your-fernet-key-here-change-in-production'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
      - ./configs:/opt/airflow/configs
    depends_on:
      airflow-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - okr_net
    command: airflow webserver
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.0-python3.11
    container_name: okr_airflow_scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: 'your-fernet-key-here-change-in-production'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
      - ./configs:/opt/airflow/configs
    depends_on:
      airflow-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - okr_net
    command: airflow scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $$(hostname)"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Unified Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: okr_unified_dashboard
    ports:
      - "5000:5000"
    volumes:
      - ./dashboard:/app
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-0}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-kafka:9092}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-okr_admin}:${POSTGRES_PASSWORD:-okr_password}@postgres:5432/${POSTGRES_DB:-postgres}
      - TENANT_ID=${TENANT_ID}
      - COMPANY_ID=${COMPANY_ID}
      - USER_ID=${USER_ID}
      - PLANNING_PERIOD_ID=${PLANNING_PERIOD_ID}
      - EMAIL=${EMAIL}
      - PASSWORD=${PASSWORD}
      - FIREBASE_API_KEY=${FIREBASE_API_KEY}
    restart: unless-stopped
    networks:
      - okr_net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Kafka Consumer Service (for real-time processing)
  kafka-consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    container_name: okr_kafka_consumer
    volumes:
      - ./kafka_pipeline:/app
      - ./data:/app/data
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-kafka:9092}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-okr_admin}:${POSTGRES_PASSWORD:-okr_password}@postgres:5432/${POSTGRES_DB:-postgres}
      - TENANT_ID=${TENANT_ID}
      - COMPANY_ID=${COMPANY_ID}
      - USER_ID=${USER_ID}
      - PLANNING_PERIOD_ID=${PLANNING_PERIOD_ID}
      - EMAIL=${EMAIL}
      - PASSWORD=${PASSWORD}
      - FIREBASE_API_KEY=${FIREBASE_API_KEY}
    restart: unless-stopped
    networks:
      - okr_net
    command: python consumers/data_consumer.py

volumes:
  airflow_db_data:
    driver: local
  postgres_data:
    driver: local
  kafka_data:
    driver: local

networks:
  okr_net:
    driver: bridge
    name: okr_network
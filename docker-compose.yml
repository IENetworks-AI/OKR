services:
  # Flask API
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: okr_api
    ports:
      - "0.0.0.0:5001:5001"  # Bind to all interfaces
    volumes:
      - ./:/app
    depends_on:
      - kafka
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/ || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
    networks:
      - okr_net

  # Nginx reverse proxy to API
  nginx:
    image: nginx:1.25-alpine
    container_name: okr_nginx
    ports:
      - "0.0.0.0:80:80"  # Bind to all interfaces
    volumes:
      - ./deploy/nginx/mlapi.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - okr_net

  # Kafka with KRaft mode
  kafka:
    image: bitnami/kafka:latest
    container_name: okr_kafka
    hostname: kafka
    environment:
      - KAFKA_KRAFT_MODE=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "0.0.0.0:9092:9092"  # Internal listener
      - "0.0.0.0:9094:9094"  # External listener
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - okr_net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: okr_kafka_ui
    ports:
      - "0.0.0.0:8085:8080"  # Bind to all interfaces
    environment:
      - KAFKA_CLUSTERS_0_NAME=okr
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    restart: always
    networks:
      - okr_net

  # Kafka demo producer
  producer:
    build:
      context: .
      dockerfile: kafka_pipeline/producers/Dockerfile
    container_name: okr_producer
    depends_on:
      kafka:
        condition: service_healthy
    restart: always
    networks:
      - okr_net

  # Kafka demo consumer
  consumer:
    build:
      context: .
      dockerfile: kafka_pipeline/consumers/Dockerfile
    container_name: okr_consumer
    depends_on:
      kafka:
        condition: service_healthy
    restart: always
    networks:
      - okr_net

  # PostgreSQL for Airflow metadata
  airflow-db:
    image: postgres:15
    container_name: okr_airflow_db
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    # no host port to avoid conflicts
    restart: always
    networks:
      - okr_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Airflow with LocalExecutor and PostgreSQL
  airflow:
    image: apache/airflow:2.9.2
    container_name: okr_airflow
    depends_on:
      airflow-db:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=30e6QztCFtuew7bCiQUZiomQd0eq2eWwHf39LaQyBaU=
      - AIRFLOW__WEBSERVER__SECRET_KEY=supersecret
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW__WEBSERVER__RBAC=true
      - AIRFLOW__WEBSERVER__AUTHENTICATE=true
      - AIRFLOW__WEBSERVER__AUTH_BACKEND=airflow.auth.backend.basic_auth
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - PIP_ADDITIONAL_REQUIREMENTS=joblib scikit-learn pandas pyyaml numpy
    user: "50000:0"
    volumes:
      - ./airflow_dags/dags:/opt/airflow/dags
      - ./requirements.txt:/requirements.txt
      - ./airflow-init.sh:/airflow-init.sh
    entrypoint: ["/bin/bash"]
    command: ["/airflow-init.sh"]
    ports:
      - "0.0.0.0:8081:8080"  # Bind to all interfaces
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 10
    networks:
      - okr_net

  # Oracle XE database
  oracle:
    image: gvenzl/oracle-xe:21-slim
    container_name: okr_oracle
    environment:
      - ORACLE_PASSWORD=oracle
    ports:
      - "0.0.0.0:1521:1521"  # Bind to all interfaces
      - "0.0.0.0:5500:5500"  # Bind to all interfaces
    restart: always
    networks:
      - okr_net

networks:
  okr_net:
    driver: bridge
          